// Generated by CoffeeScript 1.6.3
/*
Gantt 每行都有固定高度
Gantt 右边应该有个最大的textlength
Gantt 表示日期的在下面，从0开始
Gantt 最小时间单位以周为单位
Gantt 最长周数不会超过2位数
Gantt 最大任务数有限制
*/


(function() {
  var Gantt;

  Gantt = function(data, config, ctx) {
    var diff, drawGanttTasks, drawScale, limit, scaleHeight, scaleWidth, startDay, today;
    limit = {
      maxWeeks: 99,
      maxTasks: 10
    };
    scaleHeight = height - config.scaleFontSize - 5;
    scaleWidth = width - config.maxTaskNameLength - 5;
    config = {
      maxTaskNameLength: 20
    };
    today = new Date();
    startDay = new Date(data.start);
    diff = (today - startDay) / (7 * 24 * 3600 * 1000);
    drawGanttTasks = function(animationDecimal) {
      var from, i, step, task, to, todayPosX, _i, _len, _ref;
      todayPosX = 0;
      if (diff < data.totalWeeks) {
        todayPosX = width - scaleWidth + diff / data.totalWeeks * animationDecimal * (scaleWidth - 5);
      }
      step = 20;
      ctx.lineCap = "round";
      ctx.lineWidth = config.taskLineWidth;
      ctx.strokeStyle = config.taskLineColor;
      _ref = data.tasks;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        task = _ref[i];
        ctx.beginPath();
        from = width - scaleWidth + task.from / data.totalWeeks * (scaleWidth - 5);
        to = width - scaleWidth + (task.from + (task.to - task.from) * animationDecimal) / data.totalWeeks * (scaleWidth - 5);
        if ((from < todayPosX && todayPosX < to)) {
          ctx.strokeStyle = "rgb(255,0,0)";
          ctx.beginPath();
          ctx.moveTo(from, step * i + 5);
          ctx.lineTo(todayPosX, step * i + 5);
          ctx.stroke();
          ctx.strokeStyle = config.taskLineColor;
          ctx.moveTo(todayPosX, step * i + 5);
          ctx.lineTo(to, step * i + 5);
          ctx.stroke();
        } else {
          ctx.strokeStyle = from >= todayPosX ? config.taskLineColor : "rgb(255,0,0)";
          ctx.beginPath();
          ctx.moveTo(from, step * i + 5);
          ctx.lineTo(to, step * i + 5);
          ctx.stroke();
        }
      }
      if (todayPosX > 0) {
        ctx.lineWidth = config.scaleWeekLineWidth;
        ctx.strokeStyle = "rgba(255,0,0,.4)";
        ctx.beginPath();
        ctx.moveTo(todayPosX, 0);
        ctx.lineTo(todayPosX, scaleHeight);
        ctx.stroke();
      }
      return null;
    };
    drawScale = function() {
      var i, posX, step, task, _i, _j, _len, _ref, _ref1;
      ctx.lineWidth = config.scaleLineWidth;
      ctx.strokeStyle = config.scaleLineColor;
      ctx.beginPath();
      ctx.moveTo(width, scaleHeight);
      ctx.lineTo(width - scaleWidth, scaleHeight);
      ctx.stroke();
      ctx.lineWidth = config.scaleWeekLineWidth;
      ctx.strokeStyle = config.scaleWeekLineColor;
      ctx.beginPath();
      ctx.moveTo(width - scaleWidth, 0);
      ctx.lineTo(width - scaleWidth, scaleHeight);
      ctx.stroke();
      step = (scaleWidth - 5) / data.totalWeeks;
      ctx.textAlign = "right";
      ctx.fillText(data.start, width - scaleWith, scaleHeight + config.scaleFontSize);
      for (i = _i = 1, _ref = data.totalWeeks; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        posX = width - scaleWidth + step * i;
        ctx.beginPath();
        ctx.moveTo(posX, 0);
        ctx.lineTo(posX, scaleHeight);
        ctx.stroke();
        ctx.fillText("" + i, posX, scaleHeight + config.scaleFontSize);
      }
      ctx.font = "" + ctx.scaleFontStyle + " " + ctx.scaleTaskFontSize + "px " + ctx.scaleFontFamily;
      ctx.fillStyle = ctx.scaleTaskFontColor;
      step = config.scaleTaskFontSize + 20;
      _ref1 = data.tasks;
      for (i = _j = 0, _len = _ref1.length; _j < _len; i = ++_j) {
        task = _ref1[i];
        ctx.fillText(task.name, width - scaleWidth - 5, step * i + config.scaleTaskFontSize + 5);
      }
      ctx.font = "" + ctx.scaleFontStyle + " " + ctx.scaleFontSize + "px " + ctx.scaleFontFamily;
      return null;
    };
    return null;
  };

}).call(this);
